// Generated by gencpp from file multi_bspline_opt/SendTraj.msg
// DO NOT EDIT!


#ifndef MULTI_BSPLINE_OPT_MESSAGE_SENDTRAJ_H
#define MULTI_BSPLINE_OPT_MESSAGE_SENDTRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace multi_bspline_opt
{
template <class ContainerAllocator>
struct SendTraj_
{
  typedef SendTraj_<ContainerAllocator> Type;

  SendTraj_()
    : drone_id(0)
    , traj_id(0)
    , order(0)
    , cps_num_(0)
    , start_time()
    , start_pos_()
    , start_vel_()
    , start_acc_()
    , end_pos_()
    , control_pts()
    , knots()  {
    }
  SendTraj_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , traj_id(0)
    , order(0)
    , cps_num_(0)
    , start_time()
    , start_pos_(_alloc)
    , start_vel_(_alloc)
    , start_acc_(_alloc)
    , end_pos_(_alloc)
    , control_pts(_alloc)
    , knots(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef int32_t _order_type;
  _order_type order;

   typedef int32_t _cps_num__type;
  _cps_num__type cps_num_;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_pos__type;
  _start_pos__type start_pos_;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_vel__type;
  _start_vel__type start_vel_;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_acc__type;
  _start_acc__type start_acc_;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_pos__type;
  _end_pos__type end_pos_;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _control_pts_type;
  _control_pts_type control_pts;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _knots_type;
  _knots_type knots;





  typedef boost::shared_ptr< ::multi_bspline_opt::SendTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_bspline_opt::SendTraj_<ContainerAllocator> const> ConstPtr;

}; // struct SendTraj_

typedef ::multi_bspline_opt::SendTraj_<std::allocator<void> > SendTraj;

typedef boost::shared_ptr< ::multi_bspline_opt::SendTraj > SendTrajPtr;
typedef boost::shared_ptr< ::multi_bspline_opt::SendTraj const> SendTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_bspline_opt::SendTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_bspline_opt::SendTraj_<ContainerAllocator1> & lhs, const ::multi_bspline_opt::SendTraj_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.traj_id == rhs.traj_id &&
    lhs.order == rhs.order &&
    lhs.cps_num_ == rhs.cps_num_ &&
    lhs.start_time == rhs.start_time &&
    lhs.start_pos_ == rhs.start_pos_ &&
    lhs.start_vel_ == rhs.start_vel_ &&
    lhs.start_acc_ == rhs.start_acc_ &&
    lhs.end_pos_ == rhs.end_pos_ &&
    lhs.control_pts == rhs.control_pts &&
    lhs.knots == rhs.knots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_bspline_opt::SendTraj_<ContainerAllocator1> & lhs, const ::multi_bspline_opt::SendTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_bspline_opt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_bspline_opt::SendTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_bspline_opt::SendTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_bspline_opt::SendTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1c07ca91141848b23c4fb9cb569a4f8";
  }

  static const char* value(const ::multi_bspline_opt::SendTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1c07ca91141848bULL;
  static const uint64_t static_value2 = 0x23c4fb9cb569a4f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_bspline_opt/SendTraj";
  }

  static const char* value(const ::multi_bspline_opt::SendTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 drone_id\n"
"int64 traj_id\n"
"int32 order\n"
"int32 cps_num_\n"
"# int32 Dim_\n"
"# int32 TrajSampleRate\n"
"# float64 beta\n"
"time start_time\n"
"\n"
"\n"
"geometry_msgs/Point start_pos_\n"
"geometry_msgs/Point start_vel_\n"
"geometry_msgs/Point start_acc_\n"
"geometry_msgs/Point end_pos_\n"
"# float64 start_pos_x\n"
"# float64 start_pos_y\n"
"# float64 start_vel_x\n"
"# float64 start_vel_y\n"
"# float64 start_acc_x\n"
"# float64 start_acc_y\n"
"# float64 end_pos_x\n"
"# float64 end_pos_y\n"
"# float64 yaw_rate\n"
"\n"
"geometry_msgs/Point[] control_pts\n"
"float64[] knots\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::multi_bspline_opt::SendTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.traj_id);
      stream.next(m.order);
      stream.next(m.cps_num_);
      stream.next(m.start_time);
      stream.next(m.start_pos_);
      stream.next(m.start_vel_);
      stream.next(m.start_acc_);
      stream.next(m.end_pos_);
      stream.next(m.control_pts);
      stream.next(m.knots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_bspline_opt::SendTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_bspline_opt::SendTraj_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "traj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
    s << indent << "cps_num_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cps_num_);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "start_pos_: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pos_);
    s << indent << "start_vel_: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_vel_);
    s << indent << "start_acc_: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_acc_);
    s << indent << "end_pos_: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end_pos_);
    s << indent << "control_pts[]" << std::endl;
    for (size_t i = 0; i < v.control_pts.size(); ++i)
    {
      s << indent << "  control_pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.control_pts[i]);
    }
    s << indent << "knots[]" << std::endl;
    for (size_t i = 0; i < v.knots.size(); ++i)
    {
      s << indent << "  knots[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.knots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_BSPLINE_OPT_MESSAGE_SENDTRAJ_H
